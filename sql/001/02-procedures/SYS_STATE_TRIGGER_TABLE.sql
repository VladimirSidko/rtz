SET TERM ^;

CREATE OR ALTER PROCEDURE SYS_STATE_TRIGGER_TABLE (
    A_TABLE VARCHAR(254),
    A_STATE VARCHAR(254))
AS
  DECLARE VARIABLE V_TABLE    VARCHAR(31);
  DECLARE VARIABLE V_STATE    VARCHAR(31);
  DECLARE VARIABLE V_TRIGGER  VARCHAR(31);
BEGIN
  V_TABLE = UPPER(TRIM(:A_TABLE));
  V_STATE = UPPER(TRIM(:A_STATE));

  IF (NOT (:V_STATE = 'INACTIVE' OR :V_STATE = 'ACTIVE')) THEN
    EXCEPTION EX_CUSTOM :V_STATE||' IS NOT INACTIVE OR ACTIVE';

  IF (NOT EXISTS (
    SELECT
      R.RDB$RELATION_NAME
    FROM RDB$RELATIONS R
    WHERE R.RDB$RELATION_NAME = :V_TABLE AND R.RDB$VIEW_SOURCE IS NULL
    )) THEN
    EXCEPTION EX_CUSTOM :V_TABLE||' NOT EXISTS';

  FOR
    SELECT
      T.RDB$TRIGGER_NAME
    FROM RDB$TRIGGERS T
      LEFT JOIN RDB$CHECK_CONSTRAINTS C ON C.RDB$TRIGGER_NAME = T.RDB$TRIGGER_NAME
    WHERE C.RDB$TRIGGER_NAME IS NULL AND T.RDB$TRIGGER_SOURCE IS NOT NULL AND
          COALESCE(T.RDB$SYSTEM_FLAG, 0) = 0 AND (T.RDB$RELATION_NAME = :V_TABLE)
    INTO
      :V_TRIGGER
  DO
    EXECUTE STATEMENT 'ALTER TRIGGER '||:V_TRIGGER||' '||:V_STATE||'';
END
^

SET TERM ;^
